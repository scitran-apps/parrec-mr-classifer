#! /bin/bash
# This script is meant to evoke the algorithm without requiring any input arguments
#

CONTAINER="[ scitran/parrec-mr-classifier ]"

FLYWHEEL_BASE=/flywheel/v0

# Make sure that /output directory is empty (all content will be removed later).
OUTPUT_DIR=$FLYWHEEL_BASE/output
INPUT_DIR=$FLYWHEEL_BASE/input/parrec
CONFIG_FILE=$FLYWHEEL_BASE/config.json
MANIFEST_FILE=$FLYWHEEL_BASE/manifest.json


##############################################################################
# Parse configuration

function parse_config {

  CONFIG_FILE=$FLYWHEEL_BASE/config.json
  MANIFEST_FILE=$FLYWHEEL_BASE/manifest.json

  if [[ -f $CONFIG_FILE ]]; then
    echo "$(cat $CONFIG_FILE | jq -r '.config.'$1)"
  else
    CONFIG_FILE=$MANIFEST_FILE
    echo "$(cat $MANIFEST_FILE | jq -r '.config.'$1'.default')"
  fi
}


##############################################################################
# Set Time Zone

TZ="$(parse_config 'timezone')"
echo "${CONTAINER}  Setting time zone to: $TZ"
echo "$TZ" > /etc/timezone && ln -snf /usr/share/zoneinfo/"$TZ" /etc/localtime
dpkg-reconfigure -f noninteractive tzdata


##############################################################################
# Handle sync option

SYNC=$(parse_config 'sync')
if [[ ${SYNC} == "true" ]]; then
  echo -e "$CONTAINER  Syncing classification code from scitran-apps/dicom-mr-classifier/sync-classification-e4..."
  mv ${FLYWHEEL_BASE}/classification_from_label.py /tmp
  wget --quiet -O ${FLYWHEEL_BASE}/classification_from_label.py \
      https://raw.githubusercontent.com/scitran-apps/dicom-mr-classifier/sync-classification-e4/classification_from_label.py
  STAT_GET=$?
  if [[ $STAT_GET != 0 ]]; then
    echo -e "$CONTAINER Error during sync!"
    mv /tmp/classification_from_label.py ${FLYWHEEL_BASE}
  else
    chmod +x ${FLYWHEEL_BASE}/classification_from_label.py
  fi
else
  echo -e "$CONTAINER  Not syncing classification code. Using built-in version..."
fi


##############################################################################
# Check I/O directories and Generate metadata

if [[ -z $@ ]]
    then
      input_file=`find $INPUT_DIR -not -path '*/\.*' -type f | head -1`
      if [[ -n $input_file ]]
        then
            PYHONPATH=$PYTHONPATH:/flywheel/v0/ python $FLYWHEEL_BASE/parrec-mr-classifier.py "$input_file" "$OUTPUT_DIR"
            E_STATUS=$?
      else
            echo -e "$INPUT_DIR has no valid input files!"
            exit 1
      fi
else
    # Run with input arguments
    PYHONPATH=$PYTHONPATH:/flywheel/v0/ python $FLYWHEEL_BASE/parrec-mr-classifier.py $@
    E_STATUS=$?
fi


##############################################################################
# Check for outputs and exit

output=`find $OUTPUT_DIR -type f -name ".metadata.json"`

# If outputs exist, then go on...
if [[ -f $output ]] && [[ $E_STATUS == 0 ]]; then
    chmod -R 777 $OUTPUT_DIR
    echo -e "$CONTAINER  Success."
else
    echo -e "$CONTAINER  Errors occurred during metadata generation... Exiting!"
    exit 1
    if [[ -f $output ]]; then
        rm $output
    fi
fi

exit 0
